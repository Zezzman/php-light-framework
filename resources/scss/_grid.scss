@mixin create-grid($cols, $rows: 12, $row-height: 150px)
{
    display: grid;
    grid-template-columns: repeat($cols, 1fr);

    > .grid-cell
    {
        width: 100%;
        height: 100%;
        position: relative;
    }
    @if $row-height != null {
        grid-auto-rows: $row-height;
    }
    @each $breakpoint in map-keys($grid-breakpoints)
    {
        @include media-breakpoint-up($breakpoint, $grid-breakpoints)
        {
            $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

            @if ($rows > 1)
            {
                @for $i from 1 through $rows
                {
                    &.grid-r#{$infix}-#{$i}
                    {
                        /* Rows */
                        grid-auto-rows: $row-height * $i;
                    }
                    > .grid-cell
                    {
                        &.r#{$infix}-#{$i}
                        {
                            grid-row: span #{$i};
                        }
                    }
                }
            }

            @if ($cols > 1)
            {
                @for $i from 1 through $cols
                {
                    &.grid-c#{$infix}-#{$i}
                    {
                        /* Columns */
                        grid-template-columns: repeat(#{$i}, 1fr);
                    }
                    > .grid-cell
                    {
                        &.c#{$infix}-#{$i}
                        {
                            grid-column: span #{$i};
                        }
                    }
                }
            }
            &.grid#{$infix}-auto
            {
                /* Rows */
                grid-auto-rows: min-content;
                grid-auto-columns: min-content;
            }
            &.grid-r#{$infix}-auto
            {
                /* Rows */
                grid-auto-rows: min-content;
            }
            &.grid-c#{$infix}-auto
            {
                /* Columns */
                grid-auto-columns: min-content;
            }
            > .grid-cell
            {
                &.r#{$infix}-full
                {
                    grid-row: span #{$rows};
                }
                &.c#{$infix}-full
                {
                    grid-column: span #{$cols};
                }
            }
        }
    }
}
.grid
{
    @include create-grid(12, 12, 50px);
}
.list-grid
{
    @include create-grid(1);
    grid-template-rows: min-content minmax(min-content, 100%) min-content;
}
.line-grid
{
    @include create-grid(5, 1);
    grid-template-columns: repeat(auto-fill, minmax(150px, max-content));
    grid-template-rows: min-content;
}

.form-grid {
    .form-body {
        @extend .row;
        margin: 0;
    }
    .form-row {
        @extend .row;
        
        > div {
            padding: .5rem 1rem .5rem 1rem;
        }
    }
    .form-row-bold {
        @extend .row;
        font-weight: bold;
        > div {
            padding: .5rem 1rem .5rem 1rem;
        }
    }
    .form-row-input {
        @extend .row;
        
        > div {
            padding: .5rem 1rem .5rem 1rem;
        }
    }
    .form-header {
        @extend .row;
        font-weight: bold;
        margin: 0;

        > div {
            padding-top: 1rem;
            padding-bottom: 1rem;
        }
    }
    .form-submission {
        @extend .row;
        margin: 0;

        > div {
            padding-top: .5rem;
            padding-bottom: .5rem;
        }
    }
}

.table-simple
{
    background-color: $blue-dark;

    tbody
    {
        border-top-color: $gray-400 !important;
        background-color: white;

        tr
        {
            td
            {
                padding: 0.1rem;
                input:not(:focus)
                {
                    border: 0 !important;
                    border-radius: 0;
                }
            }
        }
    }
}
.table-row-link:hover
{
    cursor: pointer;
    
    td
    {
        background-color: $gray-600;
    }
}